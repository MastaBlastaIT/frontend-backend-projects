"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var tsutils = require("tsutils");
var scope_walker_1 = require("../support/scope-walker");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions(), program));
    };
    Rule.metadata = {
        description: "Disallows the use of variables/properties from unsafe/outer scopes in operator callbacks.",
        options: {
            properties: {
                allowDo: { type: "boolean" },
                allowParameters: { type: "boolean" },
                allowTap: { type: "boolean" }
            },
            type: "object"
        },
        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n            An optional object with optional `allowDo`, `allowParameters` and `allowTap` properties all of which default to `true`.\n            If the `allowDo` and `allowTap` options are `true`, the rule is not applied within `do` and `tap` operators respectively.\n            If the `allowParameters` option is `true`, referencing function parameters from outer scopes is allowed."], ["\n            An optional object with optional \\`allowDo\\`, \\`allowParameters\\` and \\`allowTap\\` properties all of which default to \\`true\\`.\n            If the \\`allowDo\\` and \\`allowTap\\` options are \\`true\\`, the rule is not applied within \\`do\\` and \\`tap\\` operators respectively.\n            If the \\`allowParameters\\` option is \\`true\\`, referencing function parameters from outer scopes is allowed."]))),
        requiresTypeInfo: true,
        ruleName: "rxjs-no-unsafe-scopes",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Unsafe scopes are forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
var Walker = (function (_super) {
    tslib_1.__extends(Walker, _super);
    function Walker(sourceFile, rawOptions, program) {
        var _this = _super.call(this, sourceFile, rawOptions, program) || this;
        _this.allowDo = true;
        _this.allowParameters = true;
        _this.allowTap = true;
        var options = _this.getOptions()[0];
        if (options) {
            _this.allowDo = (options.allowDo !== undefined) ? options.allowDo : _this.allowDo;
            _this.allowParameters = (options.allowParameters !== undefined) ? options.allowParameters : _this.allowParameters;
            _this.allowTap = (options.allowTap !== undefined) ? options.allowTap : _this.allowTap;
        }
        return _this;
    }
    Walker.prototype.visitNode = function (node) {
        if (this.callbackStack.length) {
            var validateNode = tsutils.isIdentifier(node) || util_1.isThis(node);
            if (validateNode && this.isUnsafe(node)) {
                this.addFailureAtNode(node, Rule.FAILURE_STRING);
            }
        }
        _super.prototype.visitNode.call(this, node);
    };
    Walker.prototype.isUnsafe = function (node) {
        var _a = this, callbackMap = _a.callbackMap, callbackStack = _a.callbackStack;
        var leafCallback = callbackStack[callbackStack.length - 1];
        var leafOperator = callbackMap.get(leafCallback);
        var rootCallback = callbackStack[0];
        if (this.allowDo && (leafOperator === "do")) {
            return false;
        }
        if (this.allowTap && (leafOperator === "tap")) {
            return false;
        }
        var typeChecker = this.getTypeChecker();
        var symbol = typeChecker.getSymbolAtLocation(node);
        if (!symbol) {
            return false;
        }
        var declaration = symbol.getDeclarations()[0];
        if (this.allowParameters && tsutils.isParameterDeclaration(declaration)) {
            return false;
        }
        if ((declaration.pos >= rootCallback.pos) && (declaration.pos < rootCallback.end)) {
            return false;
        }
        if (tsutils.isCallExpression(node.parent)) {
            return false;
        }
        if (tsutils.isNewExpression(node.parent)) {
            return false;
        }
        if (tsutils.isPropertyAccessExpression(node.parent)) {
            if (node === node.parent.name) {
                return false;
            }
            else if (tsutils.isCallExpression(node.parent.parent)) {
                return false;
            }
            var type = typeChecker.getTypeAtLocation(node.parent.name);
            if ((type.flags & ts.TypeFlags.EnumLiteral) !== 0) {
                return false;
            }
        }
        if (tsutils.isVariableDeclarationList(declaration.parent)) {
            if (tsutils.getVariableDeclarationKind(declaration.parent) === 2) {
                return false;
            }
        }
        if (tsutils.isImportSpecifier(declaration)) {
            return false;
        }
        return true;
    };
    return Walker;
}(scope_walker_1.ScopeWalker));
var templateObject_1;
